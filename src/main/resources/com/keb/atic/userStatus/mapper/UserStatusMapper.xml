<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
                        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.keb.atic.userStatus.mapper.UserStatusMapper">

	<!-- To. 용현 id 값 next.val 로!!!!!!! -->
	<insert id="createUserStatus">
		INSERT INTO at_user_status
		(id,
		user_id,
		year,
		month,
		total_profit,
		cur_profit,
		total_money,
		cur_money)
		VALUES (user_status_id_seq.nextval,
		#{userId},
		#{year},
		#{month},
		#{totalProfit},
		#{curProfit},
		#{totalMoney},
		#{curMoney})
	</insert>

	<select id="readUserStatus" resultType="com.keb.atic.userStatus.domain.UserStatus">

	</select>
	<!-- User상태 가장 최신화 데이터 읽기 -->
	<select id="getMaxStatus" resultType="com.keb.atic.userStatus.domain.UserStatus">
		SELECT user_id as "userId",
		year as "year",
		month as "month",
		total_profit as "totalProfit",
		cur_profit as "curProfit",
		total_money as "totalMoney",
		cur_money as "curMoney"
		FROM at_user_status
		where id = (select max(id)
		from AT_user_status
		where user_id = #{userId})
	</select>

	<select id="userStatusListByUser" resultType="com.keb.atic.userStatus.domain.UserStatus">
		SELECT user_id as "userId",
		year as "year",
		month as "month",
		total_profit as "totalProfit",
		cur_profit as "curProfit",
		total_money as "totalMoney",
		cur_money as "curMoney",
    	SUM(cur_Money) OVER(order by month) as "accumulateMoney"
		FROM at_user_status
		WHERE user_id =#{userId}
	</select>

	<delete id="deleteUserStatus">

	</delete>

	<update id="updateUserStatus">

	</update>
	
	<select id="calInterest" resultType="com.keb.atic.userStatus.domain.UserStatus">
	SELECT user_id      AS "userId", 
       month        AS "month", 
       total_profit AS "totalProfit", 
       cur_profit   AS "curProfit", 
       total_money  AS "totalMoney", 
       cur_money    AS "curMoney" 
	FROM   at_user_status
	where user_id = #{userId}
	order by month asc
	</select>
	
		<select id="updateListByMonth" parameterType="string" resultType="com.keb.atic.userStatus.domain.UserStatus">
			SELECT up.user_id      AS "userId", 
			       Sum(p.interest) AS "sumInterest", 
			       Sum(up.deposit) AS "sumDeposit" 
			FROM   at_project p 
			       JOIN at_user_project up 
			         ON p.id = up.project_id 
			WHERE  up.project_id IN (SELECT id 
			                         FROM   at_project 
			                         WHERE  goal =  cur_price 
			                                AND To_char(create_date, 'MM') = ( 
			                                   #{month}-1)) 
			GROUP  BY up.user_id 
	</select>
	<select id="leftListByMonth" parameterType="string" resultType="com.keb.atic.userStatus.domain.UserStatus">
	( select up.user_id  AS "userId", sum(deposit) AS "sumDeposit" 
      from  at_user_project up join at_user_status us 
      on up.user_id = us.user_id
      where to_char(create_date,'MM')= #{month}-1
      group by up.user_id)
      minus
    (SELECT up.user_id      AS "userId",
    sum(deposit) AS "sumDeposit" 
			FROM   at_project p 
			       JOIN at_user_project up 
			         ON p.id = up.project_id 
			WHERE  up.project_id IN (SELECT id 
			                         FROM   at_project 
			                         WHERE  goal = cur_price 
			                                AND To_char(create_date, 'MM') = ( 
			                                    #{month}-1)) 
			GROUP  BY up.user_id )
	</select>
</mapper>